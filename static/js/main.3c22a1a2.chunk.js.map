{"version":3,"sources":["Navbar.js","VrModule.js","Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Navabar","className","Component","VrModule","console","log","this","props","inputs","map","input","position","depth","width","length","height","rotation","color","camera","look-controls","orbit-controls","Sidebar","state","axis","breadth","addAxis","len","document","getElementById","value","bre","alert","isNaN","arr","push","setState","type","id","placeholder","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8YA+BeA,EAxBf,uKAEQ,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,6CACX,qCACA,kBAAC,IAAD,CAAiBA,UAAU,kBAE/B,yBAAKA,UAAU,mDACX,yBAAKA,UAAU,sBACX,kBAAC,IAAD,CAAeA,UAAU,kBAE7B,yBAAKA,UAAU,sBACX,kBAAC,IAAD,CAAcA,UAAU,kBAE5B,yBAAKA,UAAU,sBACX,kBAAC,IAAD,CAAaA,UAAU,wBAhB/C,GAA6BC,a,OCoBdC,G,mLAnBP,OACIC,QAAQC,IAAIC,KAAKC,MAAMC,QAEvB,yBAAKP,UAAU,YACX,6BAASA,UAAU,mBAEfK,KAAKC,MAAMC,OAAOC,KAAI,SAACC,GACnB,OAAO,2BAAOC,SAAS,QAAQC,MAAM,MAAMC,MAAOH,EAAMI,OAAQC,OAAO,KAAKC,SAAS,SAASC,MAAM,eAG5G,2BAAOA,MAAM,QAAQF,OAAO,MAAMF,MAAM,KAAKD,MAAM,KAAKD,SAAS,UAEjE,8BAAUO,QAAM,EAACC,iBAAA,EAAcC,iBAAe,0F,GAhBvClB,cC2FRmB,EA3Ff,4MAGIC,MAAQ,CACJC,KAAO,CACH,CAAET,OAAO,EAAIU,QAAQ,OALjC,EASIC,QAAU,WACN,IAAIC,EAAMC,SAASC,eAAe,aAAaC,MAC3CC,EAAMH,SAASC,eAAe,cAAcC,MAEhD,GAAW,KAARH,GAAsB,KAARI,EAEjBC,MAAM,6BACN3B,QAAQC,IAAI,kCAEP,GAAW,KAARqB,EACRK,MAAM,6BACN3B,QAAQC,IAAI,yBAEP,GAAW,KAARyB,EACRC,MAAM,6BACN3B,QAAQC,IAAI,0BAGR,GAAG2B,MAAMN,IAAQM,MAAMF,GACnBC,MAAM,0BAEN,CAEA,IAAIE,EAAM,EAAKX,MAAMC,KACrBnB,QAAQC,IAAI4B,EAAInB,QAChBmB,EAAIC,KAAK,CAACpB,OAAOY,EAAIF,QAAQM,IAC7B,EAAKK,SACD,CAEIZ,KAAOU,MAtC/B,uDAgDQ,OACI,yBAAKhC,UAAU,iBACX,yBAAKA,UAAU,sCACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,kBACX,iDAEJ,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,mBACX,qCAGA,uCAAOmC,KAAK,OAAOC,GAAG,YAAYC,YAAY,oBAA9C,cAA6E,OAEjF,yBAAKrC,UAAU,mBACX,sCAGA,uCAAOmC,KAAK,OAAOC,GAAG,aAAaC,YAAY,qBAA/C,cAA+E,OAEnF,yBAAKrC,UAAU,oBACX,2BAAOmC,KAAK,SAASG,QAASjC,KAAKmB,aAI/C,yBAAKxB,UAAU,yBACX,wCACA,yBAAKA,UAAU,yBACX,2BAAOmC,KAAK,SAASP,MAAM,UAC3B,2BAAOO,KAAK,SAASP,MAAM,cAIvC,yBAAK5B,UAAU,MACX,kBAAC,EAAD,CAAUO,OAAQF,KAAKgB,MAAMC,aAlFjD,GAA6BrB,aCwBdsC,MAtBf,WACE,OACE,yBAAKvC,UAAU,OAUb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCPcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASC,eAAe,SDyHpB,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.3c22a1a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Navbar.css'\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport Brightness6Icon from '@material-ui/icons/Brightness6';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\n\r\nexport class Navabar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"navbar\">\r\n                <div className=\"navbar__title MINIMAL-WHITE-SERIES-3-rgba\">\r\n                    <h3>Illum</h3>\r\n                    <Brightness6Icon className=\"navbar__icon\"/>\r\n                </div>\r\n                <div className=\"navbar__socialMedia MINIMAL-WHITE-SERIES-4-rgba\">\r\n                    <div className=\"navbar__socialIcon\">\r\n                        <InstagramIcon className=\"navbar__icon\"/>\r\n                    </div>\r\n                    <div className=\"navbar__socialIcon\">\r\n                        <FacebookIcon className=\"navbar__icon\"/>\r\n                    </div>\r\n                    <div className=\"navbar__socialIcon\">\r\n                        <TwitterIcon className=\"navbar__icon\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navabar\r\n","import React, { Component } from 'react';\r\nimport './VrModule.css'\r\n// import aframe from 'aframe'\r\n\r\nclass VrModule extends Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n            console.log(this.props.inputs),\r\n\r\n            <div className=\"vrModule\">\r\n                <a-scene className=\"vrModule__scene\">\r\n                {\r\n                    this.props.inputs.map((input) => {\r\n                        return <a-box position=\"0 5 0\" depth=\"0.2\" width={input.length} height=\"10\" rotation=\"0 45 0\" color=\"#4CC3D9\"></a-box>\r\n                    })\r\n                }\r\n                <a-box color=\"black\" height=\"0.2\" width=\"30\" depth=\"30\" position=\"0 0 0\"></a-box>\r\n                {/* <a-entity supercraft-loader=\"name: icky-snake\"></a-entity> */}\r\n                <a-entity camera look-controls orbit-controls=\"target: 0 1.6 -0.5; minDistance: 0.5; maxDistance: 180; initialPosition: 0 5 15\"></a-entity>\r\n                </a-scene>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VrModule;\r\n\r\n","import React, { Component } from 'react'\r\nimport './Sidebar.css'\r\nimport VrModule from './VrModule'\r\n\r\nexport class Sidebar extends Component {\r\n\r\n\r\n    state = {\r\n        axis : [\r\n            { length:2 , breadth:1.5 }\r\n        ]\r\n    }\r\n\r\n    addAxis = () =>{\r\n        let len = document.getElementById(\"getLength\").value;\r\n        let bre = document.getElementById(\"getbreadth\").value;\r\n        // console.log(length,breadth);\r\n        if(len === '' && bre === '')\r\n        {\r\n        alert(\"Enter all the credentials\");\r\n        console.log(\"Enter all the credentials\");\r\n        }\r\n        else if(len === ''){\r\n        alert(\"Enter all the credentials\");\r\n        console.log(\"Enter the length\");\r\n        }\r\n        else if(bre === ''){\r\n        alert(\"Enter all the credentials\");\r\n        console.log(\"Enter the breadth\");\r\n        }\r\n        else{\r\n            if(isNaN(len) || isNaN(bre)){\r\n                alert(\"Enter only numbers\")\r\n            }\r\n            else{\r\n                \r\n                let arr = this.state.axis;\r\n                console.log(arr.length)\r\n                arr.push({length:len,breadth:bre})\r\n                this.setState(\r\n                    {\r\n                        \r\n                        axis : arr\r\n                        // axis[]\r\n                    }\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main__content\">\r\n                <div className=\"sidebar MINIMAL-WHITE-SERIES-2-hex\">\r\n                    <div className=\"sidebar__top\">\r\n                        <div className=\"sidebar__title\">\r\n                            <h4>Create Your Home</h4>\r\n                        </div>\r\n                        <div className=\"sidebar__inputDetails\">\r\n                            <div className=\"sidebar__inputs\">\r\n                                <p>\r\n                                    Length\r\n                                </p>\r\n                                <input type=\"text\" id=\"getLength\" placeholder=\"Enter the length\" placeholder=\"0\"/>\r\n                            </div>\r\n                            <div className=\"sidebar__inputs\">\r\n                                <p>\r\n                                    Breadth\r\n                                </p>\r\n                                <input type=\"text\" id=\"getbreadth\" placeholder=\"Enter the breadth\" placeholder=\"0\"/>\r\n                            </div>\r\n                            <div className=\"seidebar__submit\">\r\n                                <input type=\"submit\" onClick={this.addAxis}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sidebar__loginDetails\">\r\n                        <p>Hi, Guest</p>\r\n                        <div className=\"sidebar__loginButtons\">\r\n                            <input type=\"submit\" value=\"Login\"/>\r\n                            <input type=\"submit\" value=\"SignUp\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"vr\">\r\n                    <VrModule inputs={this.state.axis}/>\r\n                    {/* <iframe src=\"vrModule.js\"></iframe> */}\r\n                    {/* <embed src=\"./VrModule.js\"/> */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Sidebar from './Sidebar'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <h1>Hello</h1>\n      <a-scene>\n        <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\"></a-box>\n        <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\"></a-sphere>\n        <a-cylinder position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" color=\"#FFC65D\"></a-cylinder>\n        <a-plane position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" color=\"#7BC8A4\"></a-plane>\n        <a-sky color=\"#ECECEC\"></a-sky>\n    </a-scene> */}\n\n      <Navbar/>\n      <Sidebar />\n      {/*Sidebar*/}\n      {/*aframe*/}\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}